{"version":3,"sources":["Components/Order/CheckoutSummary/CheckoutSummary.module.css","Containers/Checkout/ContactData/ContactData.module.css","Components/Order/CheckoutSummary/CheckoutSummary.js","Containers/Checkout/ContactData/ContactData.js","Containers/Checkout/Checkout.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","element","order","ings","price","toFixed","orderData","userId","onOrderBurger","token","inputChangedHandler","id","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","input","setState","formElementsArray","key","this","push","config","form","onSubmit","map","formElement","Input","changed","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.7c56d575.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2X4PA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__39De1\"};","import React from 'react'\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>Cancel</Button>\n            <Button \n                btnType=\"Success\" \n                clicked={props.checkoutContinued}>Continue</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport Button from '../../../Components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../.././../Components/UI/Spinner/Spinner';\nimport Input from '../../../Components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' },\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for(let element in this.state.orderForm) {\n            formData[element] = this.state.orderForm[element].value;\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price.toFixed(2),\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n        \n    }\n\n    inputChangedHandler = (event, id) => {\n        const updatedFormElement = updateObject(this.state.orderForm[id], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[id].validation),\n            touched:true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [id]: updatedFormElement\n        });\n        \n        let formIsValid = true;\n        for(let input in updatedOrderForm){\n            formIsValid = updatedOrderForm[input].valid && formIsValid;\n        }\n        this.setState({\n            orderForm: updatedOrderForm,\n            formIsValid: formIsValid\n        })\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType} \n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => {this.inputChangedHandler(event, formElement.id)}}\n                        invalid={!formElement.config.valid}\n                        touched={formElement.config.touched}\n                        shouldValidate={formElement.config.validation}\n                    />\n                ))}\n                <Button\n                    btnType=\"Success\"\n                    disabled={!this.state.formIsValid}\n                >Order</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your contact data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport CheckoutSummary from '../../Components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />;\n        if(this.props.ings) {\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchaseRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings} \n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}    \n                    />\n                    <Route \n                        path={this.props.match.path + '/contact-data'} \n                        component={ContactData} />\n                </div>\n            );\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                onChange={props.changed}\n                value={props.value} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                onChange={props.changed}\n                value={props.value} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    onChange={props.changed}\n                    value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3cBI6\",\"Label\":\"Input_Label__1v3Uc\",\"InputElement\":\"Input_InputElement__3rTLZ\",\"Invalid\":\"Input_Invalid__3Dkzu\"};"],"sourceRoot":""}