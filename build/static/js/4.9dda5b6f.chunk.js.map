{"version":3,"sources":["Containers/Auth/Auth.module.css","Containers/Auth/Auth.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updateControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","changed","invalid","shouldValidate","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,KAAO,qB,wLCSnBC,E,2MACFC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,iBAEjBC,MAAO,gBACPC,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAO,EACPC,SAAS,GAEbC,SAAU,CACNV,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,YAEjBC,MAAO,UACPC,WAAY,CACRC,UAAU,EACVK,UAAW,GAEfH,OAAO,EACPC,SAAS,IAGjBG,UAAU,G,EASdC,oBAAsB,SAACC,EAAOC,GAC1B,IAAMC,EAAc,eACb,EAAKnB,MAAMC,SADE,eAEfiB,EAFe,eAGT,EAAKlB,MAAMC,SAASiB,GAHX,CAIZX,MAAOU,EAAMG,OAAOb,MACpBI,MAAOU,YAAcJ,EAAMG,OAAOb,MAAO,EAAKP,MAAMC,SAASiB,GAAaV,YAC1EI,SAAS,MAGjB,EAAKU,SAAS,CACVrB,SAAUkB,K,EAIlBI,cAAgB,SAACN,GACbA,EAAMO,iBACN,EAAKC,MAAMC,OAAO,EAAK1B,MAAMC,SAASC,MAAMK,MAAO,EAAKP,MAAMC,SAASY,SAASN,MAAO,EAAKP,MAAMe,W,EAGtGY,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CACHb,UAAWa,EAAUb,c,mFA5BzBc,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBACxCF,KAAKJ,MAAMO,0B,+BAgCT,IAAD,OACCC,EAAoB,GAC1B,IAAK,IAAIC,KAAOL,KAAK7B,MAAMC,SACvBgC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAAQR,KAAK7B,MAAMC,SAASiC,KAIpC,IAAII,EAAOL,EAAkBM,KAAI,SAAAC,GAAW,OACxC,kBAAC,IAAD,CACIN,IAAKM,EAAYJ,GACjBjC,YAAaqC,EAAYH,OAAOlC,YAChCC,cAAeoC,EAAYH,OAAOjC,cAClCG,MAAOiC,EAAYH,OAAO9B,MAC1BkC,QAAS,SAACxB,GAAY,EAAKD,oBAAoBC,EAAOuB,EAAYJ,KAClEM,SAAUF,EAAYH,OAAO1B,MAC7BC,QAAS4B,EAAYH,OAAOzB,QAC5B+B,eAAgBH,EAAYH,OAAO7B,gBAIxCqB,KAAKJ,MAAMmB,UACVN,EAAO,kBAAC,IAAD,OAGX,IAAIO,EAAe,KAEhBhB,KAAKJ,MAAMqB,QACVD,EACI,2BAAIhB,KAAKJ,MAAMqB,MAAMC,UAI7B,IAAIC,EAAe,KAKnB,OAJGnB,KAAKJ,MAAMwB,kBACVD,EAAe,kBAAC,IAAD,CAAUE,GAAIrB,KAAKJ,MAAMM,oBAIxC,yBAAKoB,UAAWC,IAAQrD,MACnBiD,EACAH,EACD,0BAAMQ,SAAUxB,KAAKN,eAChBe,EACD,kBAAC,IAAD,CAAQgB,QAAQ,WAAhB,WAEJ,kBAAC,IAAD,CACIC,QAAS1B,KAAKF,sBACd2B,QAAQ,UAFZ,aAEgCzB,KAAK7B,MAAMe,SAAW,UAAY,e,GAtH/DyC,aA6IJC,uBAjBS,SAAAzD,GACpB,MAAO,CACH4C,QAAS5C,EAAM0D,KAAKd,QACpBE,MAAO9C,EAAM0D,KAAKZ,MAClBG,gBAAsC,OAArBjD,EAAM0D,KAAKC,MAC5B7B,eAAgB9B,EAAM4D,cAAcC,SACpC9B,iBAAkB/B,EAAM0D,KAAK3B,qBAIV,SAAA+B,GACvB,MAAO,CACHpC,OAAQ,SAACxB,EAAOW,EAAUE,GAAlB,OAA+B+C,EAASC,IAAa7D,EAAOW,EAAUE,KAC9EiB,sBAAuB,kBAAM8B,EAASC,IAA4B,UAI3DN,CAA6C1D,I,gCCvJ5D,qCAsDeiE,IAnDD,SAACvC,GACX,IAAIwC,EAAe,KACbC,EAAe,CAACd,IAAQe,cAK9B,OAJG1C,EAAMiB,SAAWjB,EAAMkB,gBAAkBlB,EAAMb,SAC9CsD,EAAa/B,KAAKiB,IAAQgB,SAGtB3C,EAAMtB,aACV,IAAM,QACF8D,EAAe,yCACXd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMrB,cAFC,CAGXkE,SAAU7C,EAAMgB,QAChBlC,MAAOkB,EAAMlB,SACjB,MACJ,IAAM,WACF0D,EAAe,4CACXd,UAAWe,EAAaG,KAAK,MACzB5C,EAAMrB,cAFC,CAGXkE,SAAU7C,EAAMgB,QAChBlC,MAAOkB,EAAMlB,SACjB,MACJ,IAAM,SACF0D,EACI,4BACId,UAAWe,EAAaG,KAAK,KAC7BC,SAAU7C,EAAMgB,QAChBlC,MAAOkB,EAAMlB,OACZkB,EAAMrB,cAAcmE,QAAQhC,KAAI,SAAAiC,GAAM,OACnC,4BAAQtC,IAAKsC,EAAOjE,MAAOA,MAAOiE,EAAOjE,OACpCiE,EAAOC,kBAKxB,MACJ,QACIR,EAAe,yCACXd,UAAWe,EAAaG,KAAK,KAC7BC,SAAU7C,EAAMgB,SACZhB,EAAMrB,cAHC,CAIXG,MAAOkB,EAAMlB,SAEzB,OACI,yBAAK4C,UAAWC,IAAQsB,OACpB,2BAAOvB,UAAWC,IAAQuB,OAAQlD,EAAMmD,OACvCX,K,mBChDbpE,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU","file":"static/js/4.9dda5b6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__34800\"};","import React, { Component } from 'react';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Email address'\n                },\n                value: 'test@test.com',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: 'test123',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updateControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({\n            controls: updateControls\n        });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {\n                isSignup: !prevState.isSignup\n            }\n        })\n    }\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event) => { this.inputChangedHandler(event, formElement.id) }}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}\n                shouldValidate={formElement.config.validation}\n            />\n        ));\n\n        if(this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">Submit</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">Switch to {this.state.isSignup ? ' SignIn' : 'SignUp'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                onChange={props.changed}\n                value={props.value} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(\" \")}\n                {...props.elementConfig}\n                onChange={props.changed}\n                value={props.value} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(\" \")}\n                    onChange={props.changed}\n                    value={props.value}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(\" \")}\n                onChange={props.changed}\n                {...props.elementConfig}\n                value={props.value} />;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3cBI6\",\"Label\":\"Input_Label__1v3Uc\",\"InputElement\":\"Input_InputElement__3rTLZ\",\"Invalid\":\"Input_Invalid__3Dkzu\"};"],"sourceRoot":""}